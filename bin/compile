#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

set -e

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

LP_DIR=$(
	cd $(dirname $0)
	cd ..
	pwd
)

# Default versions - can be overridden via environment variables
LIBHEIF_VERSION=${LIBHEIF_VERSION:-1.19.8}
LIBVIPS_VERSION=${LIBVIPS_VERSION:-8.17.0}

# Get version from environment variable (for backward compatibility)
if [ -f $ENV_DIR/VIPS_VERSION ]; then
	LIBVIPS_VERSION=$(cat $ENV_DIR/VIPS_VERSION)
fi

# Use source compilation flag - defaults to trying pre-built first
COMPILE_FROM_SOURCE=${COMPILE_FROM_SOURCE:-false}
if [ -f $ENV_DIR/COMPILE_FROM_SOURCE ]; then
	COMPILE_FROM_SOURCE=$(cat $ENV_DIR/COMPILE_FROM_SOURCE)
fi

function topic() {
	echo "-----> libvips: $*"
}

function message() {
	echo "       libvips: $*"
}

# Installation directory
INSTALL_PREFIX="$BUILD_DIR/vendor/libvips"
vendor="$INSTALL_PREFIX"
bundle="$CACHE_DIR/libvips/$LIBVIPS_VERSION"

# Detect architecture
ARCH=$(dpkg --print-architecture)
case "$ARCH" in
amd64)
	LIB_ARCH_DIR="x86_64-linux-gnu"
	;;
arm64)
	LIB_ARCH_DIR="aarch64-linux-gnu"
	;;
*)
	message "Unsupported architecture: $ARCH, falling back to source compilation"
	COMPILE_FROM_SOURCE=true
	;;
esac

# GitHub releases URL for pre-built binaries
RELEASES_URL="https://github.com/mariochavez/heroku-buildpack-libvips/releases/download"

function cached() {
	if [[ ! -d $bundle ]]; then
		return 1
	fi

	if [ -f "$bundle/.stack" ]; then
		CACHED_STACK=$(cat $bundle/.stack)
	fi

	if [ -f "$bundle/.version" ]; then
		CACHED_VERSION=$(cat $bundle/.version)
	fi

	# True when cached version matches requested version and stack
	[[ $CACHED_STACK == $STACK && $CACHED_VERSION == $LIBVIPS_VERSION ]]
}

function download_prebuilt() {
	set +e

	url="${RELEASES_URL}/v${LIBVIPS_VERSION}/${STACK}-${ARCH}.tar.gz"
	message "Attempting to download pre-built binary from $url"

	status=$(curl -sL -f -w "%{http_code}" -o /tmp/libvips.tar.gz $url)

	if [[ $status -ge 300 ]]; then
		message "Pre-built binary not available (HTTP $status), falling back to source compilation"
		set -e
		return 1
	fi

	set -e

	message "Extracting pre-built libvips $LIBVIPS_VERSION"
	mkdir -p $bundle
	tar -xz -f /tmp/libvips.tar.gz -C $bundle

	# Store metadata
	echo "$STACK" >"$bundle/.stack"
	echo "$LIBVIPS_VERSION" >"$bundle/.version"

	return 0
}

function compile_from_source() {
	message "Compiling libvips $LIBVIPS_VERSION with libheif $LIBHEIF_VERSION from source"

	# Set up directory structure
	mkdir -p "$INSTALL_PREFIX"/{bin,lib,include,share}
	mkdir -p "$CACHE_DIR/downloads"
	mkdir -p "$INSTALL_PREFIX/lib/$LIB_ARCH_DIR"

	# Set up environment for building with APT buildpack dependencies
	export CMAKE_PREFIX_PATH="$BUILD_DIR/.apt/usr:$INSTALL_PREFIX"
	export PKG_CONFIG_PATH="$BUILD_DIR/.apt/usr/lib/$LIB_ARCH_DIR/pkgconfig:$BUILD_DIR/.apt/usr/share/pkgconfig:$INSTALL_PREFIX/lib/$LIB_ARCH_DIR/pkgconfig:$INSTALL_PREFIX/lib/pkgconfig"
	export PATH="$BUILD_DIR/.apt/usr/bin:$INSTALL_PREFIX/bin:$PATH"
	export LD_LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib:$BUILD_DIR/.apt/usr/lib/$LIB_ARCH_DIR:$INSTALL_PREFIX/lib:$INSTALL_PREFIX/lib/$LIB_ARCH_DIR"
	export CMAKE_MODULE_PATH="$BUILD_DIR/.apt/usr/share/cmake-3.28/Modules:$BUILD_DIR/.apt/usr/share/cmake/Modules"
	export CMAKE_SYSTEM_PREFIX_PATH="$BUILD_DIR/.apt/usr:$INSTALL_PREFIX"
	export CMAKE_FIND_ROOT_PATH="$BUILD_DIR/.apt/usr:$INSTALL_PREFIX"

	# Verify dependencies
	for tool in cmake meson ninja pkg-config patchelf; do
		if ! command -v "$tool" >/dev/null 2>&1; then
			message "ERROR: $tool not found. Make sure apt buildpack is configured with required dependencies."
			exit 1
		fi
	done

	# Download and extract function
	download_and_extract() {
		local url="$1"
		local filename="$2"
		local extract_dir="$3"

		if [ ! -f "$CACHE_DIR/downloads/$filename" ]; then
			message "Downloading $filename..."
			curl -L "$url" -o "$CACHE_DIR/downloads/$filename"
		else
			message "Using cached $filename"
		fi

		if [[ "$filename" == *.tar.xz ]]; then
			tar -xf "$CACHE_DIR/downloads/$filename" -C "$extract_dir" --strip-components=1
		elif [[ "$filename" == *.tar.gz ]]; then
			tar -xzf "$CACHE_DIR/downloads/$filename" -C "$extract_dir" --strip-components=1
		fi
	}

	# Build libheif
	message "Building libheif $LIBHEIF_VERSION"
	LIBHEIF_BUILD_DIR=$(mktemp -d)
	cd "$LIBHEIF_BUILD_DIR"

	LIBHEIF_URL="https://github.com/strukturag/libheif/releases/download/v${LIBHEIF_VERSION}/libheif-${LIBHEIF_VERSION}.tar.gz"
	download_and_extract "$LIBHEIF_URL" "libheif-${LIBHEIF_VERSION}.tar.gz" "$LIBHEIF_BUILD_DIR"

	mkdir -p build && cd build
	cmake .. \
		-DCMAKE_PREFIX_PATH="$CMAKE_PREFIX_PATH" \
		-DCMAKE_MODULE_PATH="$CMAKE_MODULE_PATH" \
		-DCMAKE_INSTALL_PREFIX="$INSTALL_PREFIX" \
		-DCMAKE_INSTALL_LIBDIR="lib/$LIB_ARCH_DIR" \
		-DCMAKE_BUILD_TYPE=Release \
		-DWITH_EXAMPLES=OFF \
		-DWITH_LIBDE265=ON \
		-DWITH_X265=ON \
		-DWITH_AOM=ON \
		-DWITH_DAV1D=ON \
		-DBUILD_SHARED_LIBS=ON

	make -j$(nproc) && make install

	# Build libvips
	message "Building libvips $LIBVIPS_VERSION"
	LIBVIPS_BUILD_DIR=$(mktemp -d)
	cd "$LIBVIPS_BUILD_DIR"

	LIBVIPS_URL="https://github.com/libvips/libvips/releases/download/v${LIBVIPS_VERSION}/vips-${LIBVIPS_VERSION}.tar.xz"
	download_and_extract "$LIBVIPS_URL" "vips-${LIBVIPS_VERSION}.tar.xz" "$LIBVIPS_BUILD_DIR"

	export PKG_CONFIG_PATH="$INSTALL_PREFIX/lib/$LIB_ARCH_DIR/pkgconfig:$PKG_CONFIG_PATH"

	meson setup builddir \
		--prefix="$INSTALL_PREFIX" \
		--libdir="lib/$LIB_ARCH_DIR" \
		--buildtype=release \
		-Dintrospection=disabled \
		-Dmodules=disabled \
		-Dcgif=enabled \
		-Dheif=enabled \
		-Djpeg=enabled \
		-Dpng=enabled \
		-Dtiff=enabled \
		-Dwebp=enabled

	meson compile -C builddir
	meson install -C builddir

	# Set RUNPATH for libraries and binaries
	for lib in "$INSTALL_PREFIX"/lib/"$LIB_ARCH_DIR"/lib{vips,heif}*.so*; do
		if [ -f "$lib" ] && [ ! -L "$lib" ]; then
			patchelf --set-rpath "\$ORIGIN:/app/vendor/libvips/lib:/app/vendor/libvips/lib/$LIB_ARCH_DIR" "$lib"
		fi
	done

	for bin in "$INSTALL_PREFIX"/bin/vips*; do
		if [ -f "$bin" ] && [ ! -L "$bin" ]; then
			patchelf --set-rpath "/app/vendor/libvips/lib:/app/vendor/libvips/lib/$LIB_ARCH_DIR" "$bin"
		fi
	done

	# Create version info and cache the build
	cat >"$INSTALL_PREFIX/VERSION" <<EOF
libvips: $LIBVIPS_VERSION
libheif: $LIBHEIF_VERSION
architecture: $ARCH
build_date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
build_method: source_compilation
EOF

	# Cache the compiled result
	if [ ! -d "$bundle" ]; then
		mkdir -p "$bundle"
		cp -r "$INSTALL_PREFIX"/* "$bundle/"
		echo "$STACK" >"$bundle/.stack"
		echo "$LIBVIPS_VERSION" >"$bundle/.version"
	fi

	# Cleanup
	rm -rf "$LIBHEIF_BUILD_DIR" "$LIBVIPS_BUILD_DIR"
}

topic "Installing libvips $LIBVIPS_VERSION with libheif $LIBHEIF_VERSION"

# Try pre-built binary first, fall back to source compilation
if [[ "$COMPILE_FROM_SOURCE" != "true" ]] && ! cached; then
	if ! download_prebuilt; then
		compile_from_source
	fi
elif [[ "$COMPILE_FROM_SOURCE" == "true" ]]; then
	message "Source compilation requested via COMPILE_FROM_SOURCE=true"
	compile_from_source
fi

# Use cached/downloaded version
if ! cached; then
	message "ERROR: No usable libvips installation found"
	exit 1
fi

mkdir -p $vendor
cp -r $bundle/* $vendor/

topic "Building runtime environment"
mkdir -p $BUILD_DIR/.profile.d

cat <<EOF >$BUILD_DIR/.profile.d/libvips.sh
export PATH="\$PATH:\$HOME/vendor/libvips/bin"
export LD_LIBRARY_PATH="\$LD_LIBRARY_PATH:\$HOME/vendor/libvips/lib:\$HOME/vendor/libvips/lib/$LIB_ARCH_DIR"
export LIBRARY_PATH="\$LIBRARY_PATH:\$HOME/vendor/libvips/lib:\$HOME/vendor/libvips/lib/$LIB_ARCH_DIR"
export INCLUDE_PATH="\$INCLUDE_PATH:\$HOME/vendor/libvips/include"
export CPATH="\$CPATH:\$HOME/vendor/libvips/include"
export CPPPATH="\$CPPPATH:\$HOME/vendor/libvips/include"
export PKG_CONFIG_PATH="\$PKG_CONFIG_PATH:\$HOME/vendor/libvips/lib/pkgconfig:\$HOME/vendor/libvips/lib/$LIB_ARCH_DIR/pkgconfig"
EOF

# Set environment for build
export PATH="$PATH:$vendor/bin"
export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$vendor/lib:$vendor/lib/$LIB_ARCH_DIR"
export LIBRARY_PATH="$LIBRARY_PATH:$vendor/lib:$vendor/lib/$LIB_ARCH_DIR"
export INCLUDE_PATH="$INCLUDE_PATH:$vendor/include"
export CPATH="$CPATH:$vendor/include"
export CPPPATH="$CPPPATH:$vendor/include"
export PKG_CONFIG_PATH="$PKG_CONFIG_PATH:$vendor/lib/pkgconfig:$vendor/lib/$LIB_ARCH_DIR/pkgconfig"

# Give environment to later buildpacks
export | grep -E -e ' (PATH|LD_LIBRARY_PATH|LIBRARY_PATH|INCLUDE_PATH|CPATH|CPPPATH|PKG_CONFIG_PATH)=' >"$LP_DIR/export"

# Verify installation
if [ -f "$vendor/bin/vips" ]; then
	message "Installation successful!"
	if [ -f "$vendor/VERSION" ]; then
		cat "$vendor/VERSION" | while read line; do
			message "$line"
		done
	fi

	# Test HEIF support
	if "$vendor/bin/vips" list | grep -q "heif"; then
		message "✓ HEIF support confirmed"
	else
		message "⚠ HEIF support not detected"
	fi
else
	message "ERROR: libvips installation failed"
	exit 1
fi
