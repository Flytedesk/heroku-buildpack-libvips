#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

set -e
set -o pipefail

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

# Export environment variables
export_env_dir() {
	local env_dir=$1
	if [ -d "$env_dir" ]; then
		for e in $(ls $env_dir); do
			export "$e=$(cat $env_dir/$e)"
		done
	fi
}

export_env_dir $ENV_DIR

# Set versions - you can override these with environment variables
LIBHEIF_VERSION=${LIBHEIF_VERSION:-1.19.8}
LIBVIPS_VERSION=${LIBVIPS_VERSION:-8.17.0}

# Set up directories
VENDOR_DIR="$BUILD_DIR/vendor"
INSTALL_DIR="$VENDOR_DIR/libvips"
mkdir -p $INSTALL_DIR
mkdir -p $CACHE_DIR

# Detect architecture for library paths
ARCH=$(uname -m)
if [ "$ARCH" = "x86_64" ]; then
	LIB_ARCH="x86_64-linux-gnu"
elif [ "$ARCH" = "aarch64" ]; then
	LIB_ARCH="aarch64-linux-gnu"
else
	LIB_ARCH=""
fi

# Set build flags with rpath
export CPPFLAGS="-I$INSTALL_DIR/include"
export CFLAGS="-I$INSTALL_DIR/include"
export LDFLAGS="-L$INSTALL_DIR/lib -L$INSTALL_DIR/lib/$LIB_ARCH -Wl,-rpath,$INSTALL_DIR/lib -Wl,-rpath,$INSTALL_DIR/lib/$LIB_ARCH"
export PKG_CONFIG_PATH="$INSTALL_DIR/lib/pkgconfig:$INSTALL_DIR/lib/$LIB_ARCH/pkgconfig:$PKG_CONFIG_PATH"
export PATH="$INSTALL_DIR/bin:$PATH"

indent() {
	sed -u 's/^/       /'
}

echo "-----> Installing libvips $LIBVIPS_VERSION with libheif $LIBHEIF_VERSION"

# Check for required dependencies (assume apt buildpack has installed them)
echo "-----> Checking system dependencies"
missing_deps=()

for dep in cmake meson ninja patchelf pkg-config gcc; do
	if ! command -v "$dep" >/dev/null 2>&1; then
		missing_deps+=("$dep")
	fi
done

if [ ${#missing_deps[@]} -ne 0 ]; then
	echo "       ERROR: Missing required dependencies: ${missing_deps[*]}" | indent
	echo "       Please add heroku-community/apt buildpack with an Aptfile containing:" | indent
	echo "       build-essential, pkg-config, cmake, meson, ninja-build, patchelf" | indent
	echo "       and other required development libraries." | indent
	exit 1
fi

echo "       System dependencies found" | indent

# Build libheif
echo "-----> Building libheif $LIBHEIF_VERSION"
LIBHEIF_CACHE_FILE="$CACHE_DIR/libheif-$LIBHEIF_VERSION.tar.gz"

if [ ! -f "$LIBHEIF_CACHE_FILE" ]; then
	curl -L -o "$LIBHEIF_CACHE_FILE" \
		"https://github.com/strukturag/libheif/releases/download/v${LIBHEIF_VERSION}/libheif-${LIBHEIF_VERSION}.tar.gz" | indent
fi

tar -xzf "$LIBHEIF_CACHE_FILE" | indent
cd "libheif-${LIBHEIF_VERSION}"

mkdir build
cd build
cmake .. \
	-DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" \
	-DCMAKE_BUILD_TYPE=Release \
	-DWITH_DAV1D=ON \
	-DWITH_AOM_DECODER=ON \
	-DWITH_AOM_ENCODER=ON \
	-DCMAKE_INSTALL_RPATH="$INSTALL_DIR/lib;$INSTALL_DIR/lib/$LIB_ARCH" \
	-DCMAKE_BUILD_WITH_INSTALL_RPATH=TRUE \
	-DCMAKE_INSTALL_RPATH_USE_LINK_PATH=TRUE \
	-DCMAKE_EXE_LINKER_FLAGS="-Wl,-rpath,$INSTALL_DIR/lib -Wl,-rpath,$INSTALL_DIR/lib/$LIB_ARCH" \
	-DCMAKE_SHARED_LINKER_FLAGS="-Wl,-rpath,$INSTALL_DIR/lib -Wl,-rpath,$INSTALL_DIR/lib/$LIB_ARCH" | indent

make -j$(nproc) | indent
make install | indent

# Patch rpath for libheif binaries and libraries
echo "-----> Setting rpath for libheif binaries and libraries"
if [ -d "$INSTALL_DIR/bin" ]; then
	for binary in "$INSTALL_DIR/bin"/*; do
		if [ -f "$binary" ] && [ -x "$binary" ]; then
			echo "       Patching $(basename $binary)..." | indent
			patchelf --set-rpath "$INSTALL_DIR/lib:$INSTALL_DIR/lib/$LIB_ARCH" "$binary" || echo "       Failed to patch $(basename $binary)" | indent
		fi
	done
fi

if [ -d "$INSTALL_DIR/lib" ]; then
	for lib in "$INSTALL_DIR/lib"/*.so* "$INSTALL_DIR/lib/$LIB_ARCH"/*.so*; do
		if [ -f "$lib" ] && [ ! -L "$lib" ]; then
			echo "       Patching $(basename $lib)..." | indent
			patchelf --set-rpath "$INSTALL_DIR/lib:$INSTALL_DIR/lib/$LIB_ARCH" "$lib" || echo "       Failed to patch $(basename $lib)" | indent
		fi
	done
fi

cd ../..
rm -rf "libheif-${LIBHEIF_VERSION}"

# Build libvips
echo "-----> Building libvips $LIBVIPS_VERSION"
LIBVIPS_CACHE_FILE="$CACHE_DIR/vips-$LIBVIPS_VERSION.tar.xz"

if [ ! -f "$LIBVIPS_CACHE_FILE" ]; then
	curl -L -o "$LIBVIPS_CACHE_FILE" \
		"https://github.com/libvips/libvips/releases/download/v${LIBVIPS_VERSION}/vips-${LIBVIPS_VERSION}.tar.xz" | indent
fi

tar -xf "$LIBVIPS_CACHE_FILE" | indent
cd "vips-${LIBVIPS_VERSION}"

# Set additional rpath flags for meson
export LDFLAGS="$LDFLAGS -Wl,-rpath,\$ORIGIN/../lib -Wl,-rpath,\$ORIGIN/../lib/$LIB_ARCH"

meson setup build \
	--prefix="$INSTALL_DIR" \
	--buildtype=release \
	-Dheif=enabled \
	-Dheif-module=disabled \
	-Dc_link_args="-Wl,-rpath,$INSTALL_DIR/lib -Wl,-rpath,$INSTALL_DIR/lib/$LIB_ARCH -Wl,-rpath,\$ORIGIN/../lib -Wl,-rpath,\$ORIGIN/../lib/$LIB_ARCH" \
	-Dcpp_link_args="-Wl,-rpath,$INSTALL_DIR/lib -Wl,-rpath,$INSTALL_DIR/lib/$LIB_ARCH -Wl,-rpath,\$ORIGIN/../lib -Wl,-rpath,\$ORIGIN/../lib/$LIB_ARCH" | indent

cd build
meson compile | indent
meson install | indent

# Patch rpath for libvips binaries and libraries
echo "-----> Setting rpath for libvips binaries and libraries"
if [ -d "$INSTALL_DIR/bin" ]; then
	for binary in "$INSTALL_DIR/bin"/*; do
		if [ -f "$binary" ] && [ -x "$binary" ]; then
			echo "       Patching $(basename $binary)..." | indent
			patchelf --set-rpath "$INSTALL_DIR/lib:$INSTALL_DIR/lib/$LIB_ARCH" "$binary" || echo "       Failed to patch $(basename $binary)" | indent
			# Verify immediately
			readelf -d "$binary" | grep -E "(RPATH|RUNPATH)" | sed 's/^/         /' || echo "         No rpath set for $(basename $binary)" | indent
		fi
	done
fi

if [ -d "$INSTALL_DIR/lib" ]; then
	for lib in "$INSTALL_DIR/lib"/*.so* "$INSTALL_DIR/lib/$LIB_ARCH"/*.so*; do
		if [ -f "$lib" ] && [ ! -L "$lib" ]; then
			echo "       Patching $(basename $lib)..." | indent
			patchelf --set-rpath "$INSTALL_DIR/lib:$INSTALL_DIR/lib/$LIB_ARCH" "$lib" || echo "       Failed to patch $(basename $lib)" | indent
		fi
	done
fi

cd ../..
rm -rf "vips-${LIBVIPS_VERSION}"

# Create .profile.d script
echo "-----> Creating runtime configuration"
mkdir -p "$BUILD_DIR/.profile.d"

cat >"$BUILD_DIR/.profile.d/libvips.sh" <<EOF
export PATH="\$HOME/vendor/libvips/bin:\$PATH"
export LD_LIBRARY_PATH="\$HOME/vendor/libvips/lib:\$HOME/vendor/libvips/lib/$LIB_ARCH:\$LD_LIBRARY_PATH"
export PKG_CONFIG_PATH="\$HOME/vendor/libvips/lib/pkgconfig:\$HOME/vendor/libvips/lib/$LIB_ARCH/pkgconfig:\$PKG_CONFIG_PATH"
export VIPS_WARNING=0
EOF

# Also, when testing in the compile script, use the correct library path:
export LD_LIBRARY_PATH="$INSTALL_DIR/lib:$INSTALL_DIR/lib/$LIB_ARCH:$LD_LIBRARY_PATH"

# Clean up
echo "-----> Cleaning up"
apt-get clean | indent
rm -rf /var/lib/apt/lists/* | indent

echo "-----> libvips $LIBVIPS_VERSION with libheif $LIBHEIF_VERSION installation complete"

# Test installation
if [ -f "$INSTALL_DIR/bin/vips" ]; then
	echo "-----> Testing vips installation:"
	"$INSTALL_DIR/bin/vips" --version | indent
	echo "-----> Supported formats:"
	"$INSTALL_DIR/bin/vips" list classes | grep -i heif | indent || echo "       HEIF support status unclear" | indent

	# Verify rpath is set correctly
	echo "-----> Verifying rpath configuration:"
	if command -v readelf >/dev/null 2>&1; then
		echo "       Checking vips binary:" | indent
		readelf -d "$INSTALL_DIR/bin/vips" | grep -E "(RPATH|RUNPATH)" | indent || echo "       No rpath found in vips binary" | indent

		echo "       Checking libvips.so:" | indent
		if [ -f "$INSTALL_DIR/lib/$LIB_ARCH/libvips.so" ]; then
			readelf -d "$INSTALL_DIR/lib/$LIB_ARCH/libvips.so" | grep -E "(RPATH|RUNPATH)" | indent || echo "       No rpath found in libvips.so" | indent
		elif [ -f "$INSTALL_DIR/lib/libvips.so" ]; then
			readelf -d "$INSTALL_DIR/lib/libvips.so" | grep -E "(RPATH|RUNPATH)" | indent || echo "       No rpath found in libvips.so" | indent
		else
			echo "       libvips.so not found" | indent
		fi

		echo "       Checking library dependencies:" | indent
		ldd "$INSTALL_DIR/bin/vips" | grep -E "(libvips|libheif)" | indent || echo "       No libvips/libheif dependencies found" | indent
	fi
fi
